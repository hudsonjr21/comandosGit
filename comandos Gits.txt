****************************************************
***************CURSO 1******************************
****************************************************
OBS: (MATAR COMANDO TERMINAL tecla 'q').

git log = VISUALIZAR LOGS DE COMMITS.

git log --oneline = INFORMAÇÃO COMMIT RESUMIDO.

git log -p = INFORMAÇÃO LOG COMMIT DETALHADO.

git log --graph = EXIBIR LINHAS ESPECÍFICAS REPRESENTANDO O DESENVOLVIMENTO, ALTERNATIVA DO "VIZUALIZING GIT".

OBS: (Site com comandos de formatação para exibir o log commit)
[https://devhints.io/git-log]

git config --local user.name "nome do usuário"  = COMANDO DE CONFIGURAÇÃO, TROCAR NOME.

git add .gitignore = ADICIONAR ARQUIVO .gitignore

git remote = LISTAR TODOS REPOSITÓRIOS REMOTOS.

git remote add "nome.Ex: origin" " CAMINHO DA PASTA.Ex: C:/Users/..."= ADICIONAR REPOSITÓRIO EXISTENTE.

git remote -v = EXIBE O ENDEREÇO DO LOCAL.

git clone "caminho do repositório. Ex: /c/Users/documents/... ou HTTPS" = CLONA O REPOSITÓRIO.

git remote rename "atual nome" "novo nome" = MUDAR NOME DO REPOSITÓRIO.

git push "nome do repositório.Ex:Origin" "nome da branch.Ex:main,dev" = ENVIAR DADOS PARA REPOSITÓRIO.

git pull "nome do repositório.Ex:Origin" "nome da branch.Ex:main,dev" = PUXAR DADOS PARA REPOSITÓRIO.

git checkout "nome da branch" = PARA IR PARA BRANCH QUE DESEJA.

git checkout -b "nome" = CRIAR BRANCH NOVA

git merge "Nome da branch" = UNIR ALTERAÇÕES DA BRANCH

git rebase "nome branch" = GIT PEGARÁ OS COMMITS NA "BRANCH Q INFORMOU" E ATUALIZARA A "MAIN", E VAI POSSUIR TODOS COMMITS DA BRANCH ALÉM QUE HAVIA DELA MESMA.

git checkout -- "nome do arquivo" = DESFAZER MODIFICAÇÃO DO ARQUIVO, ANTES DO COMANDO add.

git reset HEAD "nome do arquivo" = DESFAZER MODIFICAÇÃO DEPOIS DE add PARA O COMMIT.

git revert "Hash do commit" = DESFAZER O COMMIT.

git stash = "GUARDAR ALTERAÇÃO DO ARQUIVO EM UM LOCAL TEMPORÁRIO, PARA TERMINAR DEPOIS, SEM PRECISAR DO COMMIT.

git stash list =  LISTA DO QUE POSSO APLICAR.

git stash apply "número da Stash" = APLICAR MODIFICAÇÃO.

git stash drop = REMOVER STASH.

git stash pop = PEGAR A ULTIMA ALTERAÇÃO ADICIONADA À STASH E REMOVÊ-LA.

git checkout "código commit" = NAVEGAR ENTRE COMMITS( mas para consolidar alguma alteração, tera q criar um branch nova.).

git diff = DIFERENÇA DO ARQUIVO QUE AINDA ESTOU MODIFICANDO, QUE NAO add PARA COMMIT.

git diff "commit".."commit2" = DIFERENÇA DO QUE FOI ALTERADO ENTRE ESSE INTERVALO DE COMMIT.

git log -n 2 = SOMENTE OS 2 ULTIMAS COMMITS.

git tag -a "nome da tag.Ex:v0.1.0" = CRIAR UMA VERSÃO ONDE VOCÊ PODE VOLTAR E TER EXATAMENTE O CÓDIGO ATÉ ALI MODIFICADO.

git tag -a "nome da tag.Ex:v0.1.0" -m "Mensagem para essa versão" = MESMA FUNCIONALIDADE DO git tag, MAS COM MENSAGEM.

git push origin "nome da tag" = ENVIAR TAG PARA MAIN DO GIT HUB.

****************************************************
***************CURSO 2******************************
****************************************************

- O Issues, no GitHub, é :
    > Reportar e controlar os problemas e bugs de um projeto. 
    > Sugestão de melhorias no projeto e pedidos de novas funcionalidades. 
    > Utilizado para organizar os palestrantes e sugestões de palestras.

- O Fork, é a cópia do repositório que deseja trabalhar e editar como preferir.

*** OBS: Depois de copiar o projeto para GitHub, clonar ele na sua maquina, criar um
acesso remoto para ele, você vai alterar o projeto, fazer o commit e um push, vai dar
erro [remote rejected] > esse erro se da por conta da credencias do Git no Windows, 
tem que apagar essas credencias. Segue abaixo o caminho para chegar nas credencias:
    >Painel de controle
        >Contas de Usuário
            >Gerenciador de Credencias
                >Credencias do Windows
                    >Credencias Genéricas - Apagar credencial "git:https://github.com"

git rebase -i HEAD~3 = UNIR OS TRÊS ULTIMAS COMMITS COM O ATUAL.
ou
git rebase -i "commit anterior" = UNIR COMMIT ATUAL COM OS ANTERIORES DO COMMIT DIGITADO.
    > VAI APARECER UMA TELA COM OS COMMITS QUE DESEJA UNIR, 
    PARA ISSO TEM QUE ADICIONAR UM "s" NA FRENTE DO COMMIT, 
    NO LUGAR DE "pick", E DEIXAR O "pick" NA FRENTE DO QUE VAI VIRAR UM COMMIT SÓ.
(OBS: USAR ":x" PARA SALVAR E CONTINUAR).
    > EM SEGUIDA VAI PEDIR UMA MENSAGEM PARA ESSE COMMIT QUE UNIFICOU.

git cherry-pick "nome commit" = TRAZER UM ÚNICO COMMIT ESPECÍFICO DE OUTRA BRANCH PARA A BRANCH QUE ESTEJA TRABALHANDO.

git bisect start = INICIAR UAM BUSCA, TENHO QUE INFORMAR UM ESTADO, UMA COMMIT DE UMA ALTERAÇÃO QUE NAO ESTEJA CORRETA.
    > git bisect bad HEAD (que é o commit atual)
        > git bisect good "algum commit" = INFORMAR O COMMIT DE ONDE O CÓDIGO ESTAVA BOM.
-Vai verificar no código se foi a alteração que procurava, ai dar o comando
            > git bisect good 
            senão:
            > git bisect bad
-Para encerrar a busca:
    > git bisect reset       

git show = MOSTRAR TODAS ALTERAÇÕES DOS COMMITS.

git show "nome commit" = ALTERAÇÃO QUE FOI FEITA NESSE COMMIT.

git blame =  EXIBIR RESPONSÁVEIS POR CADA LINHA DE CÓDIGO E SUA ALTERAÇÃO NO ARQUIVO.

git branch = VER BRANCH EXISTENTE NO PROJETO.

git branch "nome da branch" = CRIAR BRANCH.

git branch -d "nome da branch" =  DELETAR BRANCH, CASO ELA ESTEJA ANTERIOR A BRANCH ATUAL. CASO ELA ESTEJA A FRENTE, UTILIZA O "-D".

OBS:
    > Existe ferramentas visuais para auxílio para trabalho com git, umas delas o Git Cola,
    site para download: (https://git-cola.github.io);
    > Outra ferramenta de interface gráfica pra trabalhar com GIT, GitHub Desktop,
    site para download:(https://desktop.github.com);
    > Uma ferramenta mais completa que as duas anteriores, GitKraken,
    site pra download: (https://www.gitkraken.com).

cd .git = ENTRA DENTRO DO DIRETÓRIO GIT.

OBS: 
    > O Git possui eventos próprios, que são chamados de hooks. 
    Assim, conseguimos criar os chamados Git Hooks para executarem 
    uma ação quando um evento acontecer.
    > Podemos criar Shell script, para isso utilizaremos alguns comando. Abaixo exemplo:
        > vim pre-commit (sem o ".sample", pois assim são os eventos.);
        > sempre começar o arquivo "#!/bin/sh";
        > depois a frase que queira que apareça nesse script;
        > Ex: echo "Frase aqui".
        > Pressione a tecla "Esc" seguido de dois pontos (:), (x) e "Enter".

OBS: Verificar como está a permissão do script que criou, usando "ls -l" para listar todos arquivos.
    Sendo assim, se o arquivo que acabou de criar não estiver nas mesmas
    permissões que os demais, deverá executar o seguinte arquivo:
    > chmod u+x "nome do arquivo"

OBS: Depois de todos os procedimentos, sair da pasta do .git, e voltar para main(ou master).

> Podemos fazer uma copia do arquivo exemplo, "index.html" para uma pasta especifica, 
exemplo, "web", com isso fazer copia toda vez que fizermos um push para main, sendo assim.
Para isso, entraremos novamente na pasta "hooks", e criar um evento "post-receive", 
com mesmo comando dos passos anteriores, "vim post-receive". Segue abaixo o script do arquivo:
    >#!/bin/sh
    git --git-dir="caminho do servidor" --work-tree="caminho da pasta par aonde vai copiar" checkout -f

Sendo assim, toda vez que fizer alguma alteração no projeto, e fizer o "push", vai ter 
um deploy totalmente automatizado utilizando Git. Esse processo chamado de "entrega contínua".
 Entrega contínua é uma série de práticas que permitem que o código esteja de forma rápida e simples em produção. 
 Tão rápido e simples quanto rodar um "git push".

 

